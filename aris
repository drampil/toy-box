#!/bin/bash

echo -e  ' \t' "    _    ____  ___ ____     ____ _     _____    _    _   _ _____ ____   "
echo -e  ' \t' "   / \  |  _ \|_ _/ ___|   / ___| |   | ____|  / \  | \ | | ____|  _ \  "
echo -e  ' \t' "  / _ \ | |_) || |\___ \  | |   | |   |  _|   / _ \ |  \| |  _| | |_) | "
echo -e  ' \t' " / ___ \|  _ < | | ___) | | |___| |___| |___ / ___ \| |\  | |___|  _ <  "
echo -e  ' \t' "/_/   \_\_| \_\___|____/   \____|_____|_____/_/   \_\_| \_|_____|_| \_\ "
echo
echo "Enter The JSON block below and hit enter twice."
echo

#make an array to receive multiline block
array=()
while IFS= read -r -p "" url; do
    [[ $url ]] || break
    array+=("$url")
done

grab=$(printf ' %s\n' "${array[@]}")
printf "%`tput cols`s"|tr ' ' '-';
echo
echo

#write array into plain text
for i in $(echo $grab); do echo "$i" >> grabtime.txt; done

#parse the text into vars
time=$(cat grabtime.txt | grep -A1 'timestamp' | grep -v 'timestamp' | sed 's/\"//g;')
region=$(cat grabtime.txt | grep -A1 'region' | grep -v 'region' | sed 's/\"//g; s/,*$//g;')
account=$(cat grabtime.txt | grep -A1 'ownerAccountId' | grep -v 'ownerAccountId' | sed 's/\"//g; s/,*$//g;')
type=$(cat grabtime.txt | grep -A1 'type' | grep -v 'type' | sed 's/\"//g;')
instance=$(cat grabtime.txt | grep -A1 'instanceName' | grep -v 'instanceName' | sed 's/\"//g; s/,*$//g;')
function=$(cat grabtime.txt | grep -A1 'functionName' | grep -v 'functionName' | sed 's/\"//g; s/,*$//g;')
instancetype=$(cat grabtime.txt | grep -A1 'instanceType' | grep -v 'instanceType' | sed 's/\"//g; s/,*$//g;')
instanceid=$(cat grabtime.txt | grep -A1 'instanceId' | grep -v 'instanceId' | sed 's/\"//g; s/,*$//g;')
legacyid=$(cat grabtime.txt | grep -A1 'domainId' | grep -v 'domainId' | sed 's/\"//g; s/,*$//g;')
state=$(cat grabtime.txt | grep -A1 'currentState' | grep -v 'currentState' | sed 's/\"//g; s/,*$//g;')
stopstart=$(cat grabtime.txt | grep -A1 'currentStartStopCount' | grep -v 'currentStartStopCount' | sed 's/\"//g; s/,*$//g;')
domainstate=$(cat grabtime.txt | grep -A1 'currentDomainState' | grep -v 'currentDomainState' | sed 's/\"//g; s/,*$//g;')
accesspoint=$(cat grabtime.txt | grep -A1 'accessPointId' | grep -v 'accessPointId' | sed 's/\"//g; s/,*$//g;')
accesspointname=$(cat grabtime.txt | grep -A1 'accessPointName' | grep -v 'accessPointName' | sed 's/\"//g; s/,*$//g;')
elbname=$(cat grabtime.txt | grep -A1 'dnsName' | grep -v 'dnsName' | sed 's/\"//g; s/,*$//g;')
taskid=$(cat grabtime.txt | grep -A1 'taskId' | grep -v 'taskId' | sed 's/\"//g; s/,*$//g;')
taskstart=$(cat grabtime.txt | grep -A1 'taskStartTime' | grep -v 'taskStartTime' | sed 's/\"//g; s/,*$//g;')
taskend=$(cat grabtime.txt | grep -A1 'taskCompletionTime' | grep -v 'taskCompletionTime' | sed 's/\"//g; s/,*$//g;')
publicIP=$(cat grabtime.txt | grep -A1 'publicIp' | grep -v 'publicIp' | sed 's/\"//g; s/,*$//g;')
privateIP=$(cat grabtime.txt | grep -A1 'privateIp' | grep -v 'privateIp' | sed 's/\"//g; s/,*$//g;')
vpcid=$(cat grabtime.txt | grep -A1 'vpcId' | grep -v 'vpcId' | sed 's/\"//g; s/,*$//g;')
subnet=$(cat grabtime.txt | grep -A1 'subnetId' | grep -v 'subnetId' | sed 's/\"//g; s/,*$//g;')
gatewayid=$(cat grabtime.txt | grep -A1 'natGatewayId' | grep -v 'natGatewayId' | sed 's/\"//g; s/,*$//g;')
interface=$(cat grabtime.txt | grep -A1 'interfaceId' | grep -v 'interfaceId' | sed 's/\"//g; s/,*$//g;')
requester=$(cat grabtime.txt | grep -A1 'requesterAccountId' | grep -v 'requesterAccountId' | sed 's/\"//g; s/,*$//g;')
ipv4=$(cat grabtime.txt | grep -A1 'ipv4PrivatePublicIpMap' | grep -v 'ipv4PrivatePublicIpMap5' | sed 's/\"//g; s/,*$//g;')
taskstartconv=$(echo "@"$taskstart)
taskendconv=$(echo "@"$taskend)
newdate=$(echo "@"$time)
tasks=$(date -d $taskstartconv 2>&1)
taske=$(date -d $taskendconv 2>&1)
date2=$(date -d $newdate)

#internal account check
if [[ $account == "996873903847" ]];
then
        echo "Sagemaker Resource"
        echo
else
        echo
fi

#decide blocks
if [[ $type == "Ec2Instance" ]];
then
        echo "Resource Type: EC2"
        echo "AWS Account ID:" $account
        echo "Instance Type:" $instancetype
        echo "Instance Name:" $instanceid
        echo "Legacy ID: dom-"$legacyid
        echo "State:" $state
        echo "Region:" $region
        echo "Domain State:" $domainstate
        echo "Start - Stops:" $stopstart
        echo "Time Stamp:" $date2

elif [[ $type == "ElasticNetworkInterface" ]];
then
        echo "Resource Type: Elastic Network Interface"
        echo "AWS Account ID:" $account
        echo "Requestor ID:" $requestor
        echo "Interface ID:" $interface
        echo "Region:" $region
        echo "ipv4:" $ipv4
        echo "Time Stamp:" $date2

elif [[ $type == "NatGateway" ]];
then
        echo "Resource Type: Nat Gateway"
        echo "AWS Account ID:" $account
        echo "Public IP:" $publicIP
        echo "Private IP:" $privateIP
        echo "VPC ID:" $vpcid
        echo "Subnet ID:" $subnet
        echo "Nat Gateway ID:" $gatewayid
        echo "Interface:" $interface
        echo "Region:" $region
        echo "Time Stamp:" $date2

elif [[ $type == "FargateTask" ]];
then
        echo "Resource Type: Fargate/ECS"
        echo "Task ID:" $taskid
        echo "AWS Account ID:" $account
        echo "Region:" $region
        echo "Task Start Time:" $tasks
        echo "Task End Time:" $taske
        echo "Time Stamp:" $date2


elif [[ $type == "LightsailInstance" ]];
then
        echo "Resource Type: LightSail"
        echo "Instance Name:" $instance
        echo "AWS Account ID:" $account
        echo "Region:" $region
        echo "Time Stamp:" $date2

elif [[ $type == "LambdaFunction" ]];
then
        echo "Resource Type: Lamda Function"
        echo "Function Name:" $function
        echo "AWS Account ID:" $account
        echo "Region:" $region
        echo "Time Stamp:" $date2

elif [[ $type == "ElasticLoadBalancer" ]];
then
        echo "Resource Type: Elastic Load Balancer"
        echo "Access Point:" $accesspoint
        echo "Access Point Name:" $accesspointname
        echo "AWS Account ID:" $account
        echo "ELB Name:" $elbname
        echo "Region:" $region
        echo "Time Stamp:" $date2
else
        echo "Resource not detected correctly - ping beta channel"
fi
echo

rm grabtime.txt
printf "%`tput cols`s"|tr ' ' '-';
echo
echo "Done!"
