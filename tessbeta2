#!/bin/bash

echo -e " _   __ _____ "
echo -e "| | / /|  _  |"
echo -e "| |/ / | |_| |"
echo -e "|    \ \____ |"
echo -e "| |\  \.___/ /"
echo -e "\_| \_/\____/ "
              

dirty_url=$(echo $1)

#Functions List

help_function() {
	if [[ $dirty_url ==  "--help" ]];
	then
		echo
		echo "Welcome to the Tesseract Help Page!"
		echo "[~] The syntax is bash tess https://www.URL.com"
		echo "[~] Do not attempt to use IP addresses"
		echo 
		echo "API keys can be added manually from the CLI;"
		echo "APIKEY > vtkey.txt"
		echo "APIKEY > urlscankey.txt"
		echo
		echo "Thanks for reading."
		exit
	else
		echo
	fi
}

webcrawl_function() {
curl -Lsk $domain"/robots.txt" | grep 'User-agent' > robots.txt
if [ -s robots.txt ];
then
        echo -e "\xE2\x9C\x94 : Robots Rules Found"
	echo -e "\n"
        cat robots.txt | grep -v "*" | awk '{print $2}'
        rm robots.txt
else
        echo -e "\xE2\x9D\x8C : No Robot.txt found"
        rm robots.txt
fi
}

defang_function() {
        echo $dirty_url > cleaner.txt
        url=$(cat cleaner.txt | sed 's/[h]xx[p]/http/gi;' | awk '{gsub(/\[.\]/,".");}1' | awk '{gsub(/\[dot\]/,".");}1';)
        echo $url | grep -oE -m1 '[-+[:alnum:]]+[.][[:alnum:]+_.-]+' | sed 's/www.//' | head -1 > urledit.txt
        domain=$(<urledit.txt)
        echo $url > fang.txt
}

fang_function() {
fang=$(cat fang.txt | sed 's/[h]tt[p]/hxxp/gi; s/[.]/\[.]/g;')
echo $fang
rm fang.txt
}

curl_function () {
        curl -I -s -L -k -m 5 --show-error '{'"$url"'}' \
        | grep 'HTTP\|Location\|location\|x-amz-apigw-id\|CloudFront\|x-amz-cf-id:\|AmazonS3'\
        | grep -v 'onion-location\|via\|Set-Cookie'

        curl -I -s -L -k -m 5 --show-error '{'"$url"'}' > clienturl.txt 2>&1
        invalid=$(cat clienturl.txt | grep -o 'Could not resolve host')
        invalid2=$(cat clienturl.txt | grep -o 'Bad')
        if [[ $invalid == "Could not resolve host" ]];
        then
                echo "The target URL is invalid and threw error #6. Tess will shut down."
                exit
        elif [[ $invalid2 == "Bad" ]];
        then
                echo "The target URL is invalid and threw error #3. Tess will shut down."
                exit
        else
                echo
        fi

rm clienturl.txt
	
}

http_check_function () {
       httpcode=$(curl -sI '{'"$url"'}' -o/dev/null -w '%{http_version}\n')
       if [[ $httpcode == "2" ]];
       then
            echo -e "\xE2\x9C\x94 : HTTP2"
       else
            echo -e "\xE2\x9D\x8C : HTTP2"
       fi
}



wp_function () {
        curl -Ls -m 5 $url | grep -o 'wp-content' | head -1 > wpcheck.txt
        wp=$(< wpcheck.txt)
        check="wp-content"

        if [[ $wp == $check ]]; then
                echo -e "\xE2\x9C\x94 : Word Press Engine"
                
        else
                echo -e "\xE2\x9D\x8C : Not Word Press"
        fi
        rm wpcheck.txt
}

registrar_function () {
        regi=$(echo $url | awk -F/ '{n=split($3, a, "."); printf("%s.%s", a[n-1], a[n])}')

        whois $regi | grep -m 1 'Registrar:' | awk '{print $2}' > registrar.txt

        if [ -s registrar.txt ]
        then
                echo -e "\xE2\x9C\x94 : Registrar Information Found"
		echo -e "\xE2\x9C\x94 : " whois $regi | grep -m 1 'Registrar:' | sed s'/Registrar://g' | xargs
        else
                echo -e "\xE2\x9D\x8C : No Registrar Information Avaliable"
        fi
        registrar=$(cat registrar.txt)
        whois $regi | grep -m 1 "Creation Date" | xargs | sed s'/Creation Date/Domain Age/g'

        if [[ $registrar == Amazon ]];
        then
                echo "<br>RISOPS: https://risops.amazon.com/index.html#/details/domain/"$domain
                echo "<br>RISOPS: https://risops.amazon.com/index.html#/details/domain/"$regi
                echo
        else
                echo
        fi
        rm registrar.txt
}



domainfinder_function () {
echo $url | grep -oE -m1 '[-+[:alnum:]]+[.][[:alnum:]+_.-]+' | sed 's/www.//' | head -1 > urledit.txt
domain=$(<urledit.txt)
echo $domain
}

association_function() {
host $domain | grep 'has address' | head -1
}

hostfinder_function () {
host $domain > location.txt
cat location.txt | head -n 1 | awk '{print $4}' > ipsave.txt
ip=$(<ipsave.txt)
whois $ip > whois.txt
cat whois.txt | grep -m 1 -e 'OrgName' | awk '{print $2}'
}

virustotal () {
		vtkey=$(cat vtkey.txt)
curl -s -X POST 'https://www.virustotal.com/vtapi/v2/url/report' --form apikey="$vtkey" --form resource="$url" > vtresults.txt
cat vtresults.txt | awk -F 'positives\":' '{print "VT Hits" $2}' | awk -F ' ' '{print $1" "$2" "$3}' | sed 's|["}]||g; s/,//g;'
cat vtresults.txt | awk -F 'permalink\":' '{print "VT URL:"$2}' | awk -F ' ' '{print $1" "$2" "$3}' | sed 's|["}]||g; s/,//g;'
}

virustotal_failure () {
        failure=$(cat vtresults.txt | grep -o "Resource does not exist in the dataset")
        echo
        if [[ $failure == "Resource does not exist in the dataset" ]]
        then
                echo "VT Dataset incomplete >>  Requires a Manual Scan... Hang on!"
                curl -s --request POST \
                         --url 'https://www.virustotal.com/vtapi/v2/url/scan' \
                         --data 'apikey=77bf2c05f05e318259df7ef3c1a557b802c41a8bb66b30f01eb2fd395099cb0c' \
                         --data 'url='"$url"'' > /tmp/output
                echo "Please wait..."
                timer_function
                echo
                virustotal
                echo
        else
                echo
        fi
}

jumphost_function () {
for ((i=1;i<=5;i++)); do host $domain > ipsave1.txt

        ip1=$(<ipsave1.txt)
        echo whois $ip1 | awk 'NR==1 {print $5}' > whois1.txt
        who1=$(echo whois $ip1 | awk 'NR==1 {print $5}')

        if [[ $who1 == "alias" ]]
        then
                rm whois1.txt
                cat ipsave1.txt | awk 'NR==2 {print $4}' > whois1.txt
                cat ipsave1.txt | awk 'NR==2 {print $4}' >>  ipcounter1.txt
        else
                echo whois $ip1 | awk 'NR==1 {print $5}' >>  ipcounter1.txt
        fi

        who=$(<whois1.txt)
        whois $who > stage1.txt 2>&1
        cat stage1.txt | grep -m 1 -e 'OrgName' -e 'orgname' | awk '{print $2}' > stage21.txt
        stage2=$(<stage21.txt)

        # show loop results
        echo -e  "Provider:" "$stage2"'\t'"IP Address: ""$who"'\t'"Time:" $(date +"%T") >> logs.txt
        echo -e "$stage2" >> hosts1.txt; done
        echo
        cat ipcounter1.txt | sort -u
        echo
        cat logs.txt
        rm stage1.txt
        rm stage21.txt
        rm hosts1.txt
        rm ipcounter1.txt
}

timer_function () {
secs=$((30))
while [ $secs -gt 0 ]; do
        echo -ne "$secs\033[OK\r"
        sleep 1
        : $((secs--))
done
}

response_function () {
curl -s -o /dev/null -w "%{time_total}\n" $url
}

bytes_function () {
curl --silent '{'"$url"'}' | wc --bytes
}

#Run the Series
echo "execution: '{'"$url"'}'"
echo "script: tesseract"
echo
curl -X GET "$url" > /dev/null
echo
echo "HTML Scan"

help_function

defang_function

# echo "Client URL Status"
echo -e "\t Query : $url"
echo -e "\t" `http_check_function`
echo -e "\t" `curl_function`

# echo
# echo "Defanged"
# fang_function

# echo
# echo "Domain"
# domainfinder_function

echo -e "\t" `association_function`

echo -e "\t" `wp_function`

echo
echo -e "\t" `registrar_function`

#echo "Robots.txt Detection"
echo -e "\t" `webcrawl_function`
echo

echo "Other"
echo
echo -e "\t seconds : " `response_function`
echo -e "\t bytes : " `bytes_function`
# echo
# echo "Hosting Provider"
# hostfinder_function

# echo
# echo "URLSCAN API"
# urlscan_function

# echo
# echo "Screenshot"
# screenshot_function

# echo
# echo "Virus Total Results"
# virustotal
# virustotal_failure


# Commenting out DNS Flip for now
#echo "DNS Flipping Detection"
#jumphost_function

# echo
# Delete used docs
# rm urlscan.txt
# rm scan.txt
rm urledit.txt
# rm vtresults.txt
#rm logs.txt
# rm location.txt
# rm ipsave1.txt
# rm ipsave.txt
#rm whois1.txt
# rm whois.txt
rm cleaner.txt


