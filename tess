#!/bin/bash
#Removed urlscan function

echo
echo -e "████████╗███████╗███████╗███████╗███████╗██████╗  █████╗  ██████╗████████╗"
echo -e "╚══██╔══╝██╔════╝██╔════╝██╔════╝██╔════╝██╔══██╗██╔══██╗██╔════╝╚══██╔══╝"
echo -e "   ██║   █████╗  ███████╗███████╗█████╗  ██████╔╝███████║██║        ██║   "
echo -e "   ██║   ██╔══╝  ╚════██║╚════██║██╔══╝  ██╔══██╗██╔══██║██║        ██║   "
echo -e "   ██║   ███████╗███████║███████║███████╗██║  ██║██║  ██║╚██████╗   ██║   "
echo -e "   ╚═╝   ╚══════╝╚══════╝╚══════╝╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝   ╚═╝   "
echo -e "=========================================================================="
echo "Command Line Call Ediiton"
echo
echo " [~] Client URL Scanning Service"
echo " [~] Optimized for Amazon Linux 2."
echo " [~] VirusTotal key stored in vtkey.txt"
echo " [~] Error Reporting: Toy Box Team"

dirty_url=$(echo $1)

#Functions List

webcrawl_function() {
curl -Lsk $domain"/robots.txt" | grep 'User-agent' > robots.txt
if [ -s robots.txt ];
then
        echo "Robots Rules Found"
        cat robots.txt | grep -v "*" | awk '{print $2}'
        rm robots.txt
else
        echo "No Robot.txt found"
        rm robots.txt
fi
}

defang_function() {
        echo $dirty_url > cleaner.txt
        url=$(cat cleaner.txt | sed 's/[h]xx[p]/http/gi;' | awk '{gsub(/\[.\]/,".");}1' | awk '{gsub(/\[dot\]/,".");}1';)
        echo $url | grep -oE -m1 '[-+[:alnum:]]+[.][[:alnum:]+_.-]+' | sed 's/www.//' | head -1 > urledit.txt
        domain=$(<urledit.txt)
        echo $url > fang.txt
}

fang_function() {
fang=$(cat fang.txt | sed 's/[h]tt[p]/hxxp/gi; s/[.]/\[.]/g;')
echo $fang
rm fang.txt
}

curl_function () {
        curl -I -s -L -k -m 5 --show-error '{'"$url"'}' \
        | grep 'HTTP\|Location\|location\|x-amz-apigw-id\|CloudFront\|x-amz-cf-id:\|AmazonS3'\
        | grep -v 'onion-location\|via\|Set-Cookie'

        curl -I -s -L -k -m 5 --show-error '{'"$url"'}' > clienturl.txt 2>&1
        invalid=$(cat clienturl.txt | grep -o 'Could not resolve host')
        invalid2=$(cat clienturl.txt | grep -o 'Bad')
        if [[ $invalid == "Could not resolve host" ]];
        then
                echo "The target URL is invalid and threw error #6. Tess will shut down."
                exit
        elif [[ $invalid2 == "Bad" ]];
        then
                echo "The target URL is invalid and threw error #3. Tess will shut down."
                exit
        else
                echo "Evaluating"
        fi
rm clienturl.txt
}

wp_function () {
        curl -Ls -m 5 $url | grep -o 'wp-content' | head -1 > wpcheck.txt
        wp=$(< wpcheck.txt)
        check="wp-content"

        if [[ $wp == $check ]]; then
                echo "Word Press Engine Detected"
        else
                echo "This is not a Word Press Infastructure"
        fi
        rm wpcheck.txt
}

registrar_function () {
        regi=$(echo $url | awk -F/ '{n=split($3, a, "."); printf("%s.%s", a[n-1], a[n])}')
        whois $regi | grep -m 1 'Registrar:' | sed s'/Registrar://g' | xargs
        whois $regi | grep -m 1 'Registrar:' | awk '{print $2}' > registrar.txt

        if [ -s registrar.txt ]
        then
                echo "Registrar Information Found"
        else
                echo "No Registrar Information Avaliable"
        fi
        registrar=$(cat registrar.txt)
        whois $regi | grep -m 1 "Creation Date" | xargs | sed s'/Creation Date/Domain Age/g'

        if [[ $registrar == Amazon ]];
        then
                echo "RISOPS: https://risops.amazon.com/index.html#/details/domain/"$domain
                echo "RISOPS: https://risops.amazon.com/index.html#/details/domain/"$regi
                echo
        else
                echo
        fi
        echo "Top Level Domain"
        echo $regi
         if [[ $regi == "co.uk" ]];
                then
                        echo "Misidentified"
                        echo $domain
                elif [[ $regi == ".com.br" ]];
                then
                        echo "Misidentified"
                        echo $domain
                else
                        echo
                fi
        rm registrar.txt
}

domainfinder_function () {
echo $url | grep -oE -m1 '[-+[:alnum:]]+[.][[:alnum:]+_.-]+' | sed 's/www.//' | head -1 > urledit.txt
domain=$(<urledit.txt)
echo $domain
}

association_function() {
host $domain | grep 'has address'
}

hostfinder_function () {
host $domain > location.txt
cat location.txt | head -n 1 | awk '{print $4}' > ipsave.txt
ip=$(<ipsave.txt)
whois $ip > whois.txt
cat whois.txt | grep -m 1 -e 'OrgName' | awk '{print $2}'
}

virustotal () {
vtkey=$(cat vtkey.txt)
curl -s -X POST 'https://www.virustotal.com/vtapi/v2/url/report' --form apikey="$vtkey" --form resource="$url" > vtresults.txt
cat vtresults.txt | awk -F 'positives\":' '{print "VT Hits" $2}' | awk -F ' ' '{print $1" "$2" "$3}' | sed 's|["}]||g; s/,//g;'
cat vtresults.txt | awk -F 'permalink\":' '{print "VT URL:"$2}' | awk -F ' ' '{print $1" "$2" "$3}' | sed 's|["}]||g; s/,//g;'
}

virustotal_failure () {
        failure=$(cat vtresults.txt | grep -o "Resource does not exist in the dataset")
        echo
        if [[ $failure == "Resource does not exist in the dataset" ]]
        then
                echo "VT Dataset incomplete >>  Requires a Manual Scan... Hang on!"
                curl -s --request POST \
                         --url 'https://www.virustotal.com/vtapi/v2/url/scan' \
                         --data 'apikey=77bf2c05f05e318259df7ef3c1a557b802c41a8bb66b30f01eb2fd395099cb0c' \
                         --data 'url='"$url"'' > /tmp/output
                echo "Please wait..."
                timer_function
                echo
                virustotal
                echo
        else
                echo
        fi
}

jumphost_function () {
for ((i=1;i<=5;i++)); do host $domain > ipsave1.txt

        ip1=$(<ipsave1.txt)
        echo whois $ip1 | awk 'NR==1 {print $5}' > whois1.txt
        who1=$(echo whois $ip1 | awk 'NR==1 {print $5}')

        if [[ $who1 == "alias" ]]
        then
                rm whois1.txt
                cat ipsave1.txt | awk 'NR==2 {print $4}' > whois1.txt
                cat ipsave1.txt | awk 'NR==2 {print $4}' >>  ipcounter1.txt
        else
                echo whois $ip1 | awk 'NR==1 {print $5}' >>  ipcounter1.txt
        fi

        who=$(<whois1.txt)
        whois $who > stage1.txt 2>&1
        cat stage1.txt | grep -m 1 -e 'OrgName' -e 'orgname' | awk '{print $2}' > stage21.txt
        stage2=$(<stage21.txt)

        # show loop results
        echo -e  "Provider:" "$stage2"'\t'"IP Address: ""$who"'\t'"Time:" $(date +"%T") >> logs.txt
        echo -e "$stage2" >> hosts1.txt; done
        echo
        cat ipcounter1.txt | sort -u
        echo
        cat logs.txt
        rm stage1.txt
        rm stage21.txt
        rm hosts1.txt
        rm ipcounter1.txt
}

timer_function () {
secs=$((30))
while [ $secs -gt 0 ]; do
        echo -ne "$secs\033[OK\r"
        sleep 1
        : $((secs--))
done
}

#Run the Series

defang_function

echo
echo "Client URL Status"
echo "curl -ILsk $url"
curl_function

echo
echo "Defanged"
fang_function

echo
echo "Domain"
domainfinder_function

echo
echo "Associated IP(s)"
association_function

echo
echo "Word Press Infrastructure Scan"
wp_function

echo
echo "Registrar Scan"
registrar_function

echo
#echo "Robots.txt Detection"
webcrawl_function

echo
echo "Hosting Provider"
hostfinder_function

echo
echo "Virus Total Results"
virustotal
virustotal_failure

# Commenting out DNS Flip for now
#echo "DNS Flipping Detection"
#jumphost_function

#echo
#Delete used docs
rm urledit.txt
rm vtresults.txt
#rm logs.txt
rm location.txt
#rm ipsave1.txt
rm ipsave.txt
#rm whois1.txt
rm whois.txt
rm cleaner.txt

# HTTP Dictionary
status=$(curl -Is $url | grep 'HTTP' | grep -v 'Set-Cookie' | awk '{print $2}' | tail -1)

echo "HTTP Status Explanation"
curl -Is $url | grep 'HTTP\|Location\|location' \
| grep -v 'onion-location\|via\|Set-Cookie'
echo
if [[ $status == 100 ]]
then
        echo "This interim response indicates that everything so far is OK and that the client should continue the request, or ignore the response if the request is already finished."
        echo
elif [[ $status == 101 ]]
then
        echo "This code is sent in response to an Upgrade request header from the client, and indicates the protocol the server is switching to."
        echo
elif [[ $status == 102 ]]
then
        echo "This code indicates that the server has received and is processing the request, but no response is available yet."
        echo
elif [[ $status == 103 ]]
then
        echo "This status code is primarily intended to be used with the Link header, letting the user agent start preloading resources while the server prepares a response."
        echo
elif [[ $status == 200 ]]
then
        echo "The request has succeeded."
        echo
elif [[ $status == 201 ]]
then
        echo "The request has succeeded and a new resource has been created as a result. This is typically the response sent after POST requests, or some PUT requests."
        echo
elif [[ $status == 202 ]]
then
        echo "The request has been received but not yet acted upon. It is noncommittal, since there is no way in HTTP to later send an asynchronous response indicating the outcome of the request. It is intended for cases where another process or server handles the request, or for batch processing."
        echo
elif [[ $status == 203 ]]
then
        echo "This response code means the returned meta-information is not exactly the same as is available from the origin server, but is collected from a local or a third-party copy. This is mostly used for mirrors or backups of another resource. Except for that specific case, the "200 OK" response is preferred to this status."
        echo
elif [[ $status == 204 ]]
then
        echo "There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones."
        echo
elif [[ $status == 205 ]]
then
        echo "Tells the user-agent to reset the document which sent this request."
        echo
elif [[ $status == 206 ]]
then
        echo "This response code is used when the Range header is sent from the client to request only part of a resource."
        echo
elif [[ $status == 207 ]]
then
        echo "Conveys information about multiple resources, for situations where multiple status codes might be appropriate."
        echo
elif [[ $status == 208 ]]
then
        echo "Used inside a <dav:propstat> response element to avoid repeatedly enumerating the internal members of multiple bindings to the same collection."
        echo
elif [[ $status == 226 ]]
then
        echo "The server has fulfilled a GET request for the resource, and the response is a representation of the result of one or more instance-manipulations applied to the current instance."
        echo
elif [[ $status == 300 ]]
then
        echo "The request has more than one possible response. The user-agent or user should choose one of them. (There is no standardized way of choosing one of the responses, but HTML links to the possibilities are recommended so the user can pick.)"
        echo
elif [[ $status == 301 ]]
then
        echo "The URL of the requested resource has been changed permanently. The new URL is given in the response."
        echo
elif [[ $status == 302 ]]
then
        echo "This response code means that the URI of requested resource has been changed temporarily. Further changes in the URI might be made in the future. Therefore, this same URI should be used by the client in future requests."
        echo
elif [[ $status == 303 ]]
then
        echo "he server sent this response to direct the client to get the requested resource at another URI with a GET request."
        echo
elif [[ $status == 304 ]]
then
        echo "This is used for caching purposes. It tells the client that the response has not been modified, so the client can continue to use the same cached version of the response."
        echo
elif [[ $status == 307 ]]
then
        echo "The server sends this response to direct the client to get the requested resource at another URI with same method that was used in the prior request. This has the same semantics as the 302 Found HTTP response code, with the exception that the user agent must not change the HTTP method used: If a POST was used in the first request, a POST must be used in the second request."
        echo
elif [[ $status == 308 ]]
then
        echo "This means that the resource is now permanently located at another URI, specified by the Location: HTTP Response header. This has the same semantics as the 301 Moved Permanently HTTP response code, with the exception that the user agent must not change the HTTP method used: If a POST was used in the first request, a POST must be used in the second request."
        echo
elif [[ $status == 400 ]]
then
        echo "The server could not understand the request due to invalid syntax."
        echo
elif [[ $status == 401 ]]
then
        echo "Although the HTTP standard specifies unauthorized, semantically this response means unauthenticated. That is, the client must authenticate itself to get the requested response."
        echo
elif [[ $status == 402 ]]
then
        echo "The initial aim for creating this code was using it for digital payment systems, however this status code is used very rarely and no standard convention exists."
        echo
elif [[ $status == 403 ]]
then
        echo "The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401, the client's identity is known to the server."
        echo
elif [[ $status == 404 ]]
then
        echo "The server can not find the requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurrence on the web."
        echo
elif [[ $status == 405 ]]
then
        echo "The request method is known by the server but has been disabled and cannot be used. For example, an API may forbid DELETE-ing a resource. The two mandatory methods, GET and HEAD, must never be disabled and should not return this error code."
        echo
elif [[ $status == 406 ]]
then
        echo "This response is sent when the web server, after performing server-driven content negotiation, doesn't find any content that conforms to the criteria given by the user agent."
        echo
elif [[ $status == 407 ]]
then
        echo "This is similar to 401 but authentication is needed to be done by a proxy."
        echo
elif [[ $status == 408 ]]
then
        echo "This response is sent on an idle connection by some servers, even without any previous request by the client. It means that the server would like to shut down this unused connection. This response is used much more since some browsers, like Chrome, Firefox 27+, or IE9, use HTTP pre-connection mechanisms to speed up surfing. Also note that some servers merely shut down the connection without sending this message."
        echo
elif [[ $status == 409 ]]
then
        echo "This response is sent when a request conflicts with the current state of the server."
        echo
elif [[ $status == 410 ]]
then
        echo "This response is sent when the requested content has been permanently deleted from server, with no forwarding address. Clients are expected to remove their caches and links to the resource. The HTTP specification intends this status code to be used for "limited-time, promotional services". APIs should not feel compelled to indicate resources that have been deleted with this status code."
        echo
elif [[ $status == 411 ]]
then
        echo "Server rejected the request because the Content-Length header field is not defined and the server requires it."
        echo
elif [[ $status == 412 ]]
then
        echo "The client has indicated preconditions in its headers which the server does not meet."
        echo
elif [[ $status == 413 ]]
then
        echo "Request entity is larger than limits defined by server; the server might close the connection or return an Retry-After header field."
        echo
elif [[ $status == 414 ]]
then
        echo "The URI requested by the client is longer than the server is willing to interpret."
        echo
elif [[ $status == 415 ]]
then
        echo "The media format of the requested data is not supported by the server, so the server is rejecting the request."
        echo
elif [[ $status == 416 ]]
then
        echo "The range specified by the Range header field in the request can't be fulfilled; it's possible that the range is outside the size of the target URI's data."
        echo
elif [[ $status == 417 ]]
then
        echo "This response code means the expectation indicated by the Expect request header field can't be met by the server."
        echo
elif [[ $status == 418 ]]
then
        echo "The server refuses the attempt to brew coffee with a teapot."
        echo
elif [[ $status == 421 ]]
then
        echo "The request was directed at a server that is not able to produce a response. This can be sent by a server that is not configured to produce responses for the combination of scheme and authority that are included in the request URI."
        echo
elif [[ $status == 422 ]]
then
        echo "The request was well-formed but was unable to be followed due to semantic errors."
        echo
elif [[ $status == 423 ]]
then
        echo "The resource that is being accessed is locked."
        echo
elif [[ $status == 424 ]]
then
        echo "The request failed due to failure of a previous request."
        echo
elif [[ $status == 425 ]]
then
        echo "Indicates that the server is unwilling to risk processing a request that might be replayed."
        echo
elif [[ $status == 406 ]]
then
        echo "The server refuses to perform the request using the current protocol but might be willing to do so after the client upgrades to a different protocol. The server sends an Upgrade header in a 426 response to indicate the required protocol(s)."
        echo
elif [[ $status == 428 ]]
then
        echo "The origin server requires the request to be conditional. This response is intended to prevent the 'lost update' problem, where a client GETs a resource's state, modifies it, and PUTs it back to the server, when meanwhile a third party has modified the state on the server, leading to a conflict."
        echo
elif [[ $status == 429 ]]
then
        echo "The user has sent too many requests in a given amount of time (rate limiting)."
        echo
elif [[ $status == 431 ]]
then
        echo "The server is unwilling to process the request because its header fields are too large. The request may be resubmitted after reducing the size of the request header fields."
        echo
elif [[ $status == 451 ]]
then
        echo "The user-agent requested a resource that cannot legally be provided, such as a web page censored by a government."
        echo
elif [[ $status == 500 ]]
then
        echo "The server has encountered a situation it doesn't know how to handle."
        echo
elif [[ $status == 501 ]]
then
        echo "The request method is not supported by the server and cannot be handled. The only methods that servers are required to support (and therefore that must not return this code) are GET and HEAD."
        echo
elif [[ $status == 502 ]]
then
        echo "This error response means that the server, while working as a gateway to get a response needed to handle the request, got an invalid response."
        echo
elif [[ $status == 503 ]]
then
        echo "The server is not ready to handle the request. Common causes are a server that is down for maintenance or that is overloaded. Note that together with this response, a user-friendly page explaining the problem should be sent. This responses should be used for temporary conditions and the Retry-After: HTTP header should, if possible, contain the estimated time before the recovery of the service. The webmaster must also take care about the caching-related headers that are sent along with this response, as these temporary condition responses should usually not be cached."
        echo
elif [[ $status == 504 ]]
then
        echo "This error response is given when the server is acting as a gateway and cannot get a response in time."
        echo
elif [[ $status == 505 ]]
then
        echo "The HTTP version used in the request is not supported by the server."
        echo
elif [[ $status == 506 ]]
then
        echo "The server has an internal configuration error: the chosen variant resource is configured to engage in transparent content negotiation itself, and is therefore not a proper end point in the negotiation process."
        echo
elif [[ $status == 507 ]]
then
        echo "The method could not be performed on the resource because the server is unable to store the representation needed to successfully complete the request."
        echo
elif [[ $status == 508 ]]
then
        echo "The server detected an infinite loop while processing the request."
        echo
elif [[ $status == 510 ]]
then
        echo "Further extensions to the request are required for the server to fulfill it."
        echo
elif [[ $status == 511 ]]
then
        echo "The 511 status code indicates that the client needs to authenticate to gain network access."
        echo

else
        echo "The HTTP code wasn't valid. There is likely an issue with the domain or the url is not valid."
fi
